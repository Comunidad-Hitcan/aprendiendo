que es git:  es un sistema de control de versiones, nos registra los cambios realizados en un archivo o conjunto de archivos.

tres estados: 
11- Working directory: aqui es donde editamos y trabajamos con nuestro proyecto.
21- Staging area: aqui es donde escogemos que archivos estan listos para pasar
al tercer estado, al igual que decidimos que archivos no estan listos por el momento.
33- Repository: aqui se registra todo lo de nuestro proyecto.

- Configurar nombre y email.

git config --global user.name "hellmuth trejo"
git config --global user.email "hellmuthtrejo@gmail.com"

-configurar colores para la consola.
git config --global color.ui true 

git init  : este comando marca el inicio de nuestro proyecto, aqui le decimos a git que empiece a monitorear todos nuestros cambios. solo se usa al iniciar una vez nuestro proyecto.

git status : este comando sirve para ver el status de nuestros archivos.

git add  . o nombre del archivo o git add -A :  este comando es para agregar un archivo o serie de archivos para estar listos para el siguiente paso.

git commit -m "mensaje para identificar" : este comando esta confirmar  los cambios agregados. y un mensaje de ayuda.

git log : sirve par ver todos los commits con sus respectivos msjs.

git checkout  codigosha o nombredelarama : este comando sirve para ver mis commit en el tiempo y para movernos entre las ramas.

git checkout master : este comando nos mueve al ultimo commit que tenemos.

git reset --soft, --mixed, --hard.  no usar o tratar de no usar. 

git help : este comando nos ayuda a saber  como funciona git. 

head : es en el commit donde nos encontramos.

ramas : es una linea de tiempo en nuestro proyecto, que nos sirve para arreglar errores, expirementar, hacer grandes cambios, etc.

rama master: es donde comenzamos a trabajar,  es la rama principal y estable de nuestro proyecto. 

git branch : comando para ver en que rama del proyecto nos encontramos. 

git branch nombredelarama : es para crear una rama en nuestro proyecto.

FUSIONES: es la creacion de un nuevo commit juntando una rama con otra.

primero mnos situamos en la rama que absorvera los cambios. 
 
 y luego utilizamos el comando git merge Rama que vamos absorver. 

luego utlizamos git merge rama que vamos absorver.

Fast-Forward : esto sale a la hora de realizar un merge solo hace la fusion, esto pasa normalmente cuando se trabaja con archivos diferentes, o lineas de codigos distintas. 

Manual-Merge : hace la fusion pero antes de hacer la fusion debe pasar por nosotros, normalmente ocurre cuando se trabaja con los mismos archivos, o lineas de codigos .

git branch -D nombrederama a eliminar .


GIT-HUB : git y git-hub no son lo mismo. git-hub es una plataforma donde nosotros podemos guardar nuestros proyectos, usando git para su gestion.

git clone  seguido de la url del proyecto : sirve para clonar un proyecto de git-hub o gitlab. 

repositorio :  proyecto o carpeta que contiene los archivos del proyecto. 

repositorio remoto: son los que estan en git hub o git lab. 

repositorio local: estan en la computadora.

git remote add origin vinculoproyectoengit vincula nuestro proyecto local con nuestro proyecto remoto.

git remote -v nos permite ver las vinculaciones del proyecto.

git push  : pasar de la computadora a git-hub o git-lab.

ISSUES : son una Forma de continuar, mejorar o solucionar un error en nuestro proyecto (repositorio).

MILESTONES : son grupos de ISSUES que se aplican a un proyecto, caracteristicas o periodo de tiempo.

LABELS : son una manera de organizar diferentes tipos de proyectos.

Quede en el capitulo 6 minuto 0. 

git commit --ammend -m "nuevo mensaje"  : arregla el ultimo commit. 

git push origin master -f   : se le agrega -f cuando se quiere forzar a subir los  cambios realizados.

Tags : son simples puntos especificos en la historia de nuestro proyecto y se usan para marcar alguna version del mismo.

tipos de tags.

tags anotadas : son almacenadas como objetos completos dentro de la base de git y contiene mas informacion,.

git tag -a v1.0 -m "mensaje"

tags ligeras : son otra forma de crear tags, más simples y con poca inforamcion.

git tag -a v1.0

tags especificadas: se utilizan para agregar un tag a un commit en especifico.

git push origin v1.0 :  para subir versiones o tags.

git push origin --tags : comando para subir todos los tags creados.

WORKFLOWS : es un flujo de trabajo de proyectos propios, en equipo y con terceros.

Propios: somos los dueños, decidimos todo lo que pasa  en el repositorio.

En Equipo: 	Es parecido a trabajar solo, con la excepcion de que habra commits de nuestro equipo.

Git fecth y Git  merge 

git fetch origin : bajar los cambios que esten en el repositorio remoto a la rama master.

git merge origin/master



